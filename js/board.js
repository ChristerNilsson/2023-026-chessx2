// Generated by CoffeeScript 2.5.1
var getNextQuestion,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

import _ from 'https://cdn.skypack.dev/lodash';

import {
  ass,
  lerp,
  param,
  range,
  hexToBase64
} from '../js/utils.js';

import {
  Square
} from '../js/square.js';

import {
  Button
} from '../js/button.js';

import {
  coords,
  clickString,
  global,
  toObjectNotation,
  toUCI
} from '../js/globals.js';

import {
  dumpState
} from '../js/globals.js';

//SIZE = global.SIZE
getNextQuestion = () => {
  var g, i, k, l, len, len1, move, moves, qi, ref, sr;
  g = global;
  sr = g.spacedRepetition;
  if (sr.boxes[0].length === 0) {
    ref = range(5);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (sr.qindex < sr.questions.length - 1) {
        qi = sr.questions[sr.qindex];
        sr.add({
          p: g.tree.arr[qi][3],
          q: g.tree.getPath(qi),
          a: g.tree.getAnswers(qi, sr.stopp)
        });
        sr.qindex++;
      }
    }
  }
  sr.pick();
  g.chess.reset();
  moves = sr.current().q.split('.');
  for (l = 0, len1 = moves.length; l < len1; l++) {
    move = moves[l];
    g.chess.move({
      from: move.slice(0, 2),
      to: move.slice(2, 4)
    });
  }
  return g.board.flipped = moves.length % 2 === 1;
};

export var Board = class Board {
  constructor(nr) {
    var i, k, len, ref;
    //@buttons.push new Button x0*SIZE, 9.5*SIZE, 'correct', => clickString 'correct'
    this.click = this.click.bind(this);
    this.draw = this.draw.bind(this);
    //@littera()
    this.littera = this.littera.bind(this);
    this.flip = this.flip.bind(this);
    this.nr = nr;
    this.squares = [];
    this.clickedSquares = [];
    this.pieces = "";
    this.flipped = false;
    ref = range(64);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ((i) => {
        return this.squares.push(new Square(this.nr, i, () => {
          return this.click(i);
        }));
      })(i);
    }
    this.buttons = [];
  }

  click(i) {
    var col, color, csl, g, row, sq, sr, uci;
    g = global;
    sr = g.spacedRepetition;
    if (this.flipped) {
      i = 63 - i;
    }
    col = modulo(i, 8);
    row = 7 - Math.floor(i / 8);
    sq = g.chess.board()[row][col];
    color = "wb"[modulo(g.chess.history().length, 2)];
    csl = this.clickedSquares.length;
    if (csl === 0) {
      if (sq !== null && sq.color === color) {
        return this.clickedSquares.push(i);
      }
    } else if (csl === 1) {
      if (i === this.clickedSquares[0]) {
        return this.clickedSquares = []; // kontrollera draget
      } else {
        this.clickedSquares.push(i);
        uci = toUCI(this.clickedSquares);
        if (indexOf.call(sr.answers, uci) >= 0) {
          sr.correct();
          getNextQuestion();
          return this.clickedSquares = [];
        }
      }
    } else if (csl === 2) {
      return this.clickedSquares.push(i);
    } else if (csl === 3) {
      this.clickedSquares.push(i);
      uci = toUCI(this.clickedSquares.slice(2, 4));
      if (indexOf.call(sr.answers, uci) >= 0) {
        sr.wrong();
        getNextQuestion();
        return this.clickedSquares = [];
      } else {
        return this.clickedSquares = this.clickedSquares.slice(0, 2);
      }
    }
  }

  draw() {
    var button, i, j, k, l, len, len1, len2, m, piece, ref, ref1, ref2, ref3, ref4, ref5, sq;
    ref = this.buttons;
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      button.draw();
    }
    fill('white');
    textSize(global.SIZE * 0.3);
    if (this.nr === 0) {
      push();
      translate(global.SIZE * 2.75, global.SIZE * 0.5);
    } else {
      push();
      translate(global.SIZE * 2.75, global.SIZE * 9.5);
    }
    ref1 = range(8);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      ref2 = range(8);
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        j = ref2[m];
        piece = global.chess.board()[7 - i][j];
        sq = this.squares[i * 8 + j];
        if ((ref3 = this.clickedSquares.length) === 0 || ref3 === 2) {
          sq.draw(piece, this.flipped, false);
        }
        if ((ref4 = this.clickedSquares.length) === 1) {
          sq.draw(piece, this.flipped, i * 8 + j === this.clickedSquares[0]);
        } else if ((ref5 = this.clickedSquares.length) === 3 || ref5 === 4) {
          sq.draw(piece, this.flipped, i * 8 + j === this.clickedSquares[2]);
        }
      }
    }
    stroke('black');
    noFill();
    rect(global.SIZE * 4, global.SIZE * 4, global.SIZE * 8, global.SIZE * 8);
    return pop();
  }

  littera() {
    var digits, i, k, len, letters, ref, results;
    noStroke();
    fill('black');
    textSize(global.SIZE * 0.3);
    letters = this.flipped ? "hgfedcba" : "abcdefgh";
    digits = this.flipped ? "12345678" : "87654321";
    ref = range(8);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      text(letters[i], global.SIZE * (i + 1), global.SIZE * 8.8);
      results.push(text(digits[i], global.SIZE * 0.15, global.SIZE * (i + 1)));
    }
    return results;
  }

  flip() {
    return this.flipped = !this.flipped;
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-026-chessx2\coffee\board.coffee