// Generated by CoffeeScript 2.5.1
var copyToClipboard, iosCopyToClipboard,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import _ from 'https://cdn.skypack.dev/lodash';

import {
  ass,
  lerp,
  param,
  range,
  hexToBase64,
  enterFullscreen
} from '../js/utils.js';

import {
  Square
} from '../js/square.js';

import {
  Button
} from '../js/button.js';

import {
  coords,
  global,
  toObjectNotation,
  toUCI
} from '../js/globals.js';

import {
  dumpState
} from '../js/globals.js';

copyToClipboard = (string) => {
  var copyHotkey, err, isMac, result, sel, textarea, xrange;
  textarea = null;
  result = null;
  try {
    textarea = document.createElement('textarea');
    textarea.setAttribute('readonly', true);
    textarea.setAttribute('contenteditable', true);
    textarea.style.position = 'fixed';
    textarea.value = string;
    document.body.appendChild(textarea);
    textarea.focus();
    textarea.select();
    xrange = document.createRange();
    xrange.selectNodeContents(textarea);
    sel = window.getSelection();
    sel.removeAllRanges();
    sel.addRange(xrange);
    textarea.setSelectionRange(0, textarea.value.length);
    result = document.execCommand('copy');
  } catch (error) {
    err = error;
    alert(err);
    result = null;
  } finally {
    document.body.removeChild(textarea);
  }
  if (!result) {
    isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
    copyHotkey = isMac != null ? isMac : {
      '⌘C': 'CTRL+C'
    };
    result = prompt(`Press ${copyHotkey}`, string);
    if (!result) {
      return false;
    }
  }
  return true;
};

iosCopyToClipboard = (el) => {
  var oldContentEditable, oldReadOnly, s, xrange;
  oldContentEditable = el.contentEditable;
  oldReadOnly = el.readOnly;
  xrange = document.createRange();
  el.contentEditable = true;
  el.readOnly = false;
  xrange.selectNodeContents(el);
  s = window.getSelection();
  s.removeAllRanges();
  s.addRange(xrange);
  el.setSelectionRange(0, 999999);
  el.contentEditable = oldContentEditable;
  el.readOnly = oldReadOnly;
  return document.execCommand('copy');
};

export var Board = class Board {
  constructor(nr) {
    var i, k, len, ref;
    this.click = this.click.bind(this);
    this.draw = this.draw.bind(this);
    this.littera = this.littera.bind(this);
    this.nr = nr;
    this.squares = [];
    this.clickedSquares = [];
    this.pieces = "";
    ref = range(64);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ((i) => {
        return this.squares.push(new Square(this.nr, i, () => {
          return this.click(i);
        }));
      })(i);
    }
    this.buttons = [];
  }

  click(i) {
    var col, color, csl, g, row, sq, uci;
    g = global;
    if (this.nr === modulo(g.chess.history().length, 2)) {
      return;
    }
    col = modulo(i, 8);
    row = 7 - Math.floor(i / 8);
    sq = g.chess.board()[row][col];
    color = "wb"[modulo(g.chess.history().length, 2)];
    csl = this.clickedSquares.length;
    if (csl === 0) {
      if (sq !== null && sq.color === color) {
        return this.clickedSquares.push(i);
      }
    } else if (csl === 1) {
      if (i === this.clickedSquares[0]) {
        return this.clickedSquares = []; // kontrollera draget
      } else {
        this.clickedSquares.push(i);
        uci = toUCI(this.clickedSquares);
        // är detta ett korrekt drag? I så fall, utför det
        if (g.chess.move({
          from: uci.slice(0, 2),
          to: uci.slice(2, 4)
        })) {
          //input = document.getElementById "myInput"
          //input.value = g.chess.pgn()
          //copyToClipboard g.chess.pgn()
          //navigator.clipboard.writeText g.chess.pgn()
          return this.clickedSquares = [];
        } else {
          return this.clickedSquares.pop();
        }
      }
    }
  }

  draw() {
    var SIZE, button, i, j, k, l, len, len1, len2, m, piece, ref, ref1, ref2, ref3, ref4, ref5, sq;
    ref = this.buttons;
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      button.draw();
    }
    fill('white');
    textSize(global.size() * 0.3);
    push();
    if (this.nr === 0) {
      translate(global.mx(), global.my());
    } else {
      translate(global.mx(), global.my() + 9 * global.size());
    }
    ref1 = range(8);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      ref2 = range(8);
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        j = ref2[m];
        piece = global.chess.board()[7 - i][j];
        sq = this.squares[i * 8 + j];
        if ((ref3 = this.clickedSquares.length) === 0 || ref3 === 2) {
          sq.draw(piece, false);
        }
        if ((ref4 = this.clickedSquares.length) === 1) {
          sq.draw(piece, i * 8 + j === this.clickedSquares[0]);
        } else if ((ref5 = this.clickedSquares.length) === 3 || ref5 === 4) {
          sq.draw(piece, i * 8 + j === this.clickedSquares[2]);
        }
      }
    }
    stroke('black');
    if (this.nr === global.chess.history().length % 2) {
      fill(128, 128, 128, 64);
    } else {
      noFill();
    }
    SIZE = global.size();
    rect(SIZE * 4, SIZE * 4, SIZE * 8, SIZE * 8);
    return pop();
  }

  littera() {
    var SIZE, digits, i, k, len, letters, ref, results;
    SIZE = global.size();
    noStroke();
    fill('black');
    textSize(SIZE * 0.3);
    letters = false ? "hgfedcba" : "abcdefgh";
    digits = false ? "12345678" : "87654321";
    ref = range(8);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      text(letters[i], SIZE * (i + 1), SIZE * 8.8);
      results.push(text(digits[i], SIZE * 0.15, SIZE * (i + 1)));
    }
    return results;
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9hcmQuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcYm9hcmQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLGVBQUEsRUFBQSxrQkFBQTtFQUFBOztBQUFBLE9BQU8sQ0FBUCxNQUFBOztBQUNBLE9BQUE7RUFBUSxHQUFSO0VBQVksSUFBWjtFQUFpQixLQUFqQjtFQUF1QixLQUF2QjtFQUE2QixXQUE3QjtFQUF5QyxlQUF6QztDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLE1BQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxNQUFSO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsTUFBUjtFQUFlLE1BQWY7RUFBc0IsZ0JBQXRCO0VBQXVDLEtBQXZDO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsU0FBUjtDQUFBLE1BQUE7O0FBRUEsZUFBQSxHQUFrQixDQUFDLE1BQUQsQ0FBQSxHQUFBO0FBQ2xCLE1BQUEsVUFBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxRQUFBLEVBQUE7RUFBQyxRQUFBLEdBQVc7RUFDWCxNQUFBLEdBQVM7QUFFVDtJQUNDLFFBQUEsR0FBVyxRQUFRLENBQUMsYUFBVCxDQUF1QixVQUF2QjtJQUNYLFFBQVEsQ0FBQyxZQUFULENBQXNCLFVBQXRCLEVBQWtDLElBQWxDO0lBQ0EsUUFBUSxDQUFDLFlBQVQsQ0FBc0IsaUJBQXRCLEVBQXlDLElBQXpDO0lBQ0EsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFmLEdBQTBCO0lBQzFCLFFBQVEsQ0FBQyxLQUFULEdBQWlCO0lBRWpCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBZCxDQUEwQixRQUExQjtJQUVBLFFBQVEsQ0FBQyxLQUFULENBQUE7SUFDQSxRQUFRLENBQUMsTUFBVCxDQUFBO0lBRUEsTUFBQSxHQUFTLFFBQVEsQ0FBQyxXQUFULENBQUE7SUFDVCxNQUFNLENBQUMsa0JBQVAsQ0FBMEIs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Q0FBRCxDQUFaLEVBQWdCLElBQUEsR0FBSyxDQUFDLENBQUEsR0FBRSxDQUFILENBQXJCLEVBQTJCLElBQUEsR0FBSyxHQUFoQzttQkFDQSxJQUFBLENBQUssTUFBTSxDQUFDLENBQUQsQ0FBWCxFQUFlLElBQUEsR0FBSyxJQUFwQixFQUF5QixJQUFBLEdBQUssQ0FBQyxDQUFBLEdBQUUsQ0FBSCxDQUE5QjtJQUZELENBQUE7O0VBUlM7O0FBbEVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnaHR0cHM6Ly9jZG4uc2t5cGFjay5kZXYvbG9kYXNoJ1xyXG5pbXBvcnQge2FzcyxsZXJwLHBhcmFtLHJhbmdlLGhleFRvQmFzZTY0LGVudGVyRnVsbHNjcmVlbn0gZnJvbSAnLi4vanMvdXRpbHMuanMnXHJcbmltcG9ydCB7U3F1YXJlfSBmcm9tICcuLi9qcy9zcXVhcmUuanMnXHJcbmltcG9ydCB7QnV0dG9ufSBmcm9tICcuLi9qcy9idXR0b24uanMnXHJcbmltcG9ydCB7Y29vcmRzLGdsb2JhbCx0b09iamVjdE5vdGF0aW9uLHRvVUNJfSBmcm9tICcuLi9qcy9nbG9iYWxzLmpzJ1xyXG5pbXBvcnQge2R1bXBTdGF0ZX0gZnJvbSAnLi4vanMvZ2xvYmFscy5qcydcclxuXHJcbmNvcHlUb0NsaXBib2FyZCA9IChzdHJpbmcpID0+XHJcblx0dGV4dGFyZWEgPSBudWxsXHJcblx0cmVzdWx0ID0gbnVsbFxyXG5cclxuXHR0cnkgXHJcblx0XHR0ZXh0YXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XHJcblx0XHR0ZXh0YXJlYS5zZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JywgdHJ1ZSk7XHJcblx0XHR0ZXh0YXJlYS5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIHRydWUpO1xyXG5cdFx0dGV4dGFyZWEuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnOyAjIHByZXZlbnQgc2Nyb2xsIGZyb20ganVtcGluZyB0byB0aGUgYm90dG9tIHdoZW4gZm9jdXMgaXMgc2V0LlxyXG5cdFx0dGV4dGFyZWEudmFsdWUgPSBzdHJpbmdcclxuXHJcblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIHRleHRhcmVhXHJcblxyXG5cdFx0dGV4dGFyZWEuZm9jdXMoKVxyXG5cdFx0dGV4dGFyZWEuc2VsZWN0KClcclxuXHJcblx0XHR4cmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpXHJcblx0XHR4cmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRleHRhcmVhKVxyXG5cclxuXHRcdHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKVxyXG5cdFx0c2VsLnJlbW92ZUFsbFJhbmdlcygpXHJcblx0XHRzZWwuYWRkUmFuZ2UgeHJhbmdlXHJcblxyXG5cdFx0dGV4dGFyZWEuc2V0U2VsZWN0aW9uUmFuZ2UgMCwgdGV4dGFyZWEudmFsdWUubGVuZ3RoXHJcblx0XHRyZXN1bHQgPSBkb2N1bWVudC5leGVjQ29tbWFuZCAnY29weSdcclxuXHRjYXRjaCBlcnJcclxuXHRcdGFsZXJ0IGVyclxyXG5cdFx0cmVzdWx0ID0gbnVsbFxyXG5cdGZpbmFsbHlcclxuXHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQgdGV4dGFyZWFcclxuXHRcclxuXHJcblx0I21hbnVhbCBjb3B5IGZhbGxiYWNrIHVzaW5nIHByb21wdFxyXG5cdGlmICFyZXN1bHQgXHJcblx0XHRpc01hYyA9IG5hdmlnYXRvci5wbGF0Zm9ybS50b1VwcGVyQ2FzZSgpLmluZGV4T2YoJ01BQycpID49IDBcclxuXHRcdGNvcHlIb3RrZXkgPSBpc01hYyA/ICfijJhDJyA6ICdDVFJMK0MnO1xyXG5cdFx0cmVzdWx0ID0gcHJvbXB0KFwiUHJlc3MgI3tjb3B5SG90a2V5fVwiLCBzdHJpbmcpOyAjIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcclxuXHRcdGlmICghcmVzdWx0KSBcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0cmV0dXJuIHRydWVcclxuXHJcblxyXG5pb3NDb3B5VG9DbGlwYm9hcmQgPSAoZWwpID0+XHJcblx0b2xkQ29udGVudEVkaXRhYmxlID0gZWwuY29udGVudEVkaXRhYmxlXHJcblx0b2xkUmVhZE9ubHkgPSBlbC5yZWFkT25seVxyXG5cdHhyYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKClcclxuXHJcblx0ZWwuY29udGVudEVkaXRhYmxlID0gdHJ1ZVxyXG5cdGVsLnJlYWRPbmx5ID0gZmFsc2VcclxuXHR4cmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzIGVsXHJcblxyXG5cdHMgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKClcclxuXHRzLnJlbW92ZUFsbFJhbmdlcygpXHJcblx0cy5hZGRSYW5nZSB4cmFuZ2VcclxuXHJcblx0ZWwuc2V0U2VsZWN0aW9uUmFuZ2UgMCwgOTk5OTk5IFxyXG5cclxuXHRlbC5jb250ZW50RWRpdGFibGUgPSBvbGRDb250ZW50RWRpdGFibGVcclxuXHRlbC5yZWFkT25seSA9IG9sZFJlYWRPbmx5XHJcblxyXG5cdGRvY3VtZW50LmV4ZWNDb21tYW5kICdjb3B5J1xyXG5cclxuZXhwb3J0IGNsYXNzIEJvYXJkXHJcblx0Y29uc3RydWN0b3I6IChAbnIpIC0+XHJcblx0XHRAc3F1YXJlcyA9IFtdXHJcblx0XHRAY2xpY2tlZFNxdWFyZXMgPSBbXVxyXG5cdFx0QHBpZWNlcyA9IFwiXCJcclxuXHRcdGZvciBpIGluIHJhbmdlIDY0XHJcblx0XHRcdGRvIChpKSA9PiBAc3F1YXJlcy5wdXNoIG5ldyBTcXVhcmUgQG5yLCBpLCA9PiBAY2xpY2sgaVxyXG5cclxuXHRcdEBidXR0b25zID0gW11cclxuXHJcblx0Y2xpY2sgOiAoaSkgPT5cclxuXHRcdGcgPSBnbG9iYWxcclxuXHRcdGlmIEBuciA9PSBnLmNoZXNzLmhpc3RvcnkoKS5sZW5ndGggJSUgMiB0aGVuIHJldHVyblxyXG5cdFx0Y29sID0gaSAlJSA4XHJcblx0XHRyb3cgPSA3IC0gaSAvLyA4XHJcblx0XHRzcSA9IGcuY2hlc3MuYm9hcmQoKVtyb3ddW2NvbF1cclxuXHRcdGNvbG9yID0gXCJ3YlwiW2cuY2hlc3MuaGlzdG9yeSgpLmxlbmd0aCAlJSAyXSAjIGbDtnJ2w6RudGFkIGbDpHJnIHDDpSBwasOkc2VuXHJcblx0XHRjc2wgPSBAY2xpY2tlZFNxdWFyZXMubGVuZ3RoXHJcblx0XHRpZiBjc2wgPT0gMFxyXG5cdFx0XHRpZiBzcSAhPSBudWxsIGFuZCBzcS5jb2xvciA9PSBjb2xvciB0aGVuIEBjbGlja2VkU3F1YXJlcy5wdXNoIGlcclxuXHRcdGVsc2UgaWYgY3NsID09IDFcclxuXHRcdFx0aWYgaSA9PSBAY2xpY2tlZFNxdWFyZXNbMF0gIyDDpW5ncmEgb20gc2FtbWEgcnV0YVxyXG5cdFx0XHRcdEBjbGlja2VkU3F1YXJlcyA9IFtdXHJcblx0XHRcdGVsc2UgIyBrb250cm9sbGVyYSBkcmFnZXRcclxuXHRcdFx0XHRAY2xpY2tlZFNxdWFyZXMucHVzaCBpXHJcblx0XHRcdFx0dWNpID0gdG9VQ0kgQGNsaWNrZWRTcXVhcmVzXHJcblx0XHRcdFx0IyDDpHIgZGV0dGEgZXR0IGtvcnJla3QgZHJhZz8gSSBzw6UgZmFsbCwgdXRmw7ZyIGRldFxyXG5cdFx0XHRcdGlmIGcuY2hlc3MubW92ZSB7ZnJvbTp1Y2kuc2xpY2UoMCwyKSwgdG86dWNpLnNsaWNlKDIsNCl9XHJcblx0XHRcdFx0XHQjaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCBcIm15SW5wdXRcIlxyXG5cdFx0XHRcdFx0I2lucHV0LnZhbHVlID0gZy5jaGVzcy5wZ24oKVxyXG5cdFx0XHRcdFx0I2NvcHlUb0NsaXBib2FyZCBnLmNoZXNzLnBnbigpXHJcblx0XHRcdFx0XHQjbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQgZy5jaGVzcy5wZ24oKVxyXG5cclxuXHRcdFx0XHRcdEBjbGlja2VkU3F1YXJlcyA9IFtdXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0QGNsaWNrZWRTcXVhcmVzLnBvcCgpXHJcblxyXG5cdGRyYXcgOiA9PlxyXG5cclxuXHRcdGZvciBidXR0b24gaW4gQGJ1dHRvbnNcclxuXHRcdFx0YnV0dG9uLmRyYXcoKVxyXG5cclxuXHRcdGZpbGwgJ3doaXRlJ1xyXG5cdFx0dGV4dFNpemUgZ2xvYmFsLnNpemUoKSAqIDAuM1xyXG5cclxuXHRcdHB1c2goKVxyXG5cdFx0aWYgQG5yPT0wIHRoZW4gdHJhbnNsYXRlIGdsb2JhbC5teCgpLCBnbG9iYWwubXkoKVxyXG5cdFx0ZWxzZSB0cmFuc2xhdGUgZ2xvYmFsLm14KCksIGdsb2JhbC5teSgpICsgOSAqIGdsb2JhbC5zaXplKClcclxuXHJcblx0XHRmb3IgaSBpbiByYW5nZSA4XHJcblx0XHRcdGZvciBqIGluIHJhbmdlIDhcclxuXHRcdFx0XHRwaWVjZSA9IGdsb2JhbC5jaGVzcy5ib2FyZCgpWzctaV1bal1cclxuXHRcdFx0XHRzcSA9IEBzcXVhcmVzW2kqOCtqXVxyXG5cdFx0XHRcdGlmIEBjbGlja2VkU3F1YXJlcy5sZW5ndGggaW4gWzAsMl1cclxuXHRcdFx0XHRcdHNxLmRyYXcgcGllY2UsIGZhbHNlXHJcblx0XHRcdFx0aWYgQGNsaWNrZWRTcXVhcmVzLmxlbmd0aCBpbiBbMV1cclxuXHRcdFx0XHRcdHNxLmRyYXcgcGllY2UsIGkqOCtqPT1AY2xpY2tlZFNxdWFyZXNbMF1cclxuXHRcdFx0XHRlbHNlIGlmIEBjbGlja2VkU3F1YXJlcy5sZW5ndGggaW4gWzMsNF1cclxuXHRcdFx0XHRcdHNxLmRyYXcgcGllY2UsIGkqOCtqPT1AY2xpY2tlZFNxdWFyZXNbMl1cclxuXHJcblx0XHRzdHJva2UgJ2JsYWNrJ1xyXG5cdFx0aWYgQG5yID09IGdsb2JhbC5jaGVzcy5oaXN0b3J5KCkubGVuZ3RoJTIgdGhlbiBmaWxsIDEyOCwxMjgsMTI4LDY0IGVsc2Ugbm9GaWxsKClcclxuXHRcdFNJWkUgPSBnbG9iYWwuc2l6ZSgpXHJcblx0XHRyZWN0IFNJWkUqNCxTSVpFKjQsU0laRSo4LFNJWkUqOFxyXG5cdFx0cG9wKClcclxuXHJcblx0bGl0dGVyYSA6ID0+XHJcblx0XHRTSVpFID0gZ2xvYmFsLnNpemUoKVxyXG5cdFx0bm9TdHJva2UoKVxyXG5cdFx0ZmlsbCAnYmxhY2snXHJcblx0XHR0ZXh0U2l6ZSBTSVpFKjAuM1xyXG5cdFx0bGV0dGVycyA9IGlmIGZhbHNlIHRoZW4gXCJoZ2ZlZGNiYVwiIGVsc2UgXCJhYmNkZWZnaFwiXHJcblx0XHRkaWdpdHMgID0gaWYgZmFsc2UgdGhlbiBcIjEyMzQ1Njc4XCIgZWxzZSBcIjg3NjU0MzIxXCJcclxuXHJcblx0XHRmb3IgaSBpbiByYW5nZSA4XHJcblx0XHRcdHRleHQgbGV0dGVyc1tpXSxTSVpFKihpKzEpLFNJWkUqOC44XHJcblx0XHRcdHRleHQgZGlnaXRzW2ldLFNJWkUqMC4xNSxTSVpFKihpKzEpXHJcbiJdfQ==
//# sourceURL=c:\github\2023-026-chessx2\coffee\board.coffee