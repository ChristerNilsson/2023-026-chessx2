// Generated by CoffeeScript 2.5.1
var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } },
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  global
} from '../js/globals.js';

import {
  param,
  range
} from '../js/utils.js';

export var Button = class Button {
  constructor(x1, y1, text1, onclick1) {
    this.draw = this.draw.bind(this);
    this.inside = this.inside.bind(this);
    this.x = x1;
    this.y = y1;
    this.text = text1;
    this.onclick = onclick1;
    this.w = 3 * global.size();
    this.h = 4 * global.size();
    this.bg = 'lightgray';
    this.fg = 'black';
    this.align = CENTER;
  }

  draw() {
    var x;
    noStroke();
    //fill @bg
    //rect @x,@y,@w,@h*0.65
    if (this.align === LEFT) {
      x = this.x - 0.45 * this.w;
    } else {
      x = this.x;
    }
    //fill @fg
    push();
    textSize(2 * global.size()); // 0.4
    textAlign(this.align);
    noStroke();
    text(this.text, x, this.y + 0.05 * global.size());
    return pop();
  }

  inside(x, y) {
    param.Number(x);
    param.Number(y);
    return param.Boolean((this.x - this.w / 2 < x && x < this.x + this.w / 2) && (this.y - this.h / 2 < y && y < this.y + this.h / 2));
  }

};

export var ClockButton = class ClockButton extends Button {
  constructor(x, y, nr, onclick) {
    super(x, y, '', onclick);
    this.draw = this.draw.bind(this);
    this.drawClock = this.drawClock.bind(this);
    this.nr = nr;
    this.w = 2.6 * global.size();
    this.h = 4 * global.size();
    this.state = -1; // paused
  }

  draw() {
    boundMethodCheck(this, ClockButton);
    noStroke();
    push();
    textSize(2 * global.size());
    textAlign(this.align);
    noStroke();
    this.drawClock(0);
    this.drawClock(1);
    return pop();
  }

  drawClock(player) {
    var minuter, p, res, sekunder, t, timmar, x, y;
    boundMethodCheck(this, ClockButton);
    p = modulo(global.chess.history().length, 2);
    if (global.clocks[player] < 60) {
      fill("red");
    }
    noStroke();
    textSize(global.size());
    t = global.clocks[player];
    if (!global.paused && p !== player) {
      t -= 1 / 240;
    }
    global.clocks[player] = t;
    t = round(t);
    sekunder = modulo(t, 60);
    t = Math.floor(t / 60);
    if (sekunder < 10) {
      sekunder = "0" + sekunder;
    }
    minuter = modulo(t, 60);
    if (minuter < 10) {
      minuter = "0" + minuter;
    }
    timmar = Math.floor(t / 60);
    if (timmar > 0) {
      res = timmar + "h" + minuter;
    } else {
      res = minuter + ":" + sekunder;
    }
    this.bg = ['black', 'white'][player];
    if (p === player || global.paused) {
      this.bg = 'gray';
    }
    push();
    x = this.nr === 0 ? global.mx() / 2 : width - global.mx() / 2;
    y = global.size() * [8, 10][player];
    translate(x, y);
    if (this.nr === 1) {
      scale(-1, -1);
    }
    fill(this.bg);
    rect(0, 0, this.w, this.h * 0.22);
    fill(['white', 'black'][player]);
    console.log(global.windows);
    if (global.windows) {
      text(res, 0, 0.1 * global.size());
    } else {
      text(res, 0, 0.0 * global.size());
    }
    pop();
    push();
    y = global.size() * 9;
    translate(x, y);
    if (this.nr === 1) {
      scale(-1, -1);
    }
    fill('white');
    textSize(global.size() * 0.5);
    text(global.material, 0, 0); //[-global.size(),global.size()][player]
    return pop();
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-026-chessx2\coffee\button.coffee