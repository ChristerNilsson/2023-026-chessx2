// Generated by CoffeeScript 2.5.1
var link, undo;

import {
  ass,
  log,
  range,
  split,
  param,
  hexToBase64,
  spaceShip
} from '../js/utils.js';

import {
  Button
} from '../js/button.js';

import _ from 'https://cdn.skypack.dev/lodash';

export var global = {
  tree: null,
  board0: null,
  board1: null,
  chess: null,
  spacedRepetition: null,
  //start : -1,
  //stopp : -1,

  //questions : [],
  //qindex : -1,

  //name : 'bishop',
  name: 'tree',
  //arr : [],
  version: 'ver: B',
  //child : 0, # move under consideration
  //children : [], # sorted list of [value,san,uci]

  //SIZE : 32, # of square
  size: null,
  setSize: null,
  mx: null,
  setMx: null,
  my: null,
  setMy: null,
  pics: {}, // 12 pjäser
  // data:null,
  buttons: []
};

//database : {}, # fen => value
//currNode:null, # pekar in i ett träd
//count: 0, # räknar antal nya drag i trädet
//stack : [] # innehåller aktuell gren
export var coords = (uci) => {
  var c0, c1, r0, r1;
  param.String(uci);
  c0 = "abcdefgh".indexOf(uci[0]);
  r0 = "12345678".indexOf(uci[1]);
  c1 = "abcdefgh".indexOf(uci[2]);
  r1 = "12345678".indexOf(uci[3]);
  return param.Array([c0 + 8 * r0, c1 + 8 * r1]);
};

ass([8, 24], coords("a2a4"));

export var toUCI = ([from, to]) => {
  var c0, c1, r0, r1;
  param.Integer(from);
  param.Integer(to);
  c0 = "abcdefgh"[from % 8];
  r0 = "12345678"[Math.floor(from / 8)];
  c1 = "abcdefgh"[to % 8];
  r1 = "12345678"[Math.floor(to / 8)];
  return param.String(c0 + r0 + c1 + r1);
};

ass("e2e4", toUCI([12, 28]));

export var toObjectNotation = ([from, to]) => {
  var uci;
  param.Integer(from);
  param.Integer(to);
  uci = toUCI([from, to]);
  from = uci.slice(0, 2);
  to = uci.slice(2, 4);
  return param.Object({from, to});
};

ass({
  from: 'e2',
  to: 'e4'
}, toObjectNotation([12, 28]));

export var empty = (n) => {
  param.Integer(n);
  return param.String((1 + Math.floor(n / 8)).toString());
};

undo = () => {};


// if global.stack.length == 0 then return
// global.chess.undo()
// global.currNode = global.stack.pop()
// # makeChildren()
export var dumpState = () => {
  console.log('STATE ########');
  // console.log '  stack',global.stack
  console.log('  currNode', global.currNode);
  return console.log('  history', global.chess.history());
};

link = () => {
  return 'https://lichess.org/analysis/' + global.chess.fen();
};

// export clickString = (key) =>
// 	param.String key
// 	#g = global
// 	#if key == 'flip' then g.board.flip()
// 	if key == 'link' then window.open link(), '_blank'
// 	# else if key == 'up'   then g.child = (g.child-1) %% g.children.length
// 	# else if key == 'down' then g.child = (g.child+1) %% g.children.length
// 	else if key == 'undo' then undo()
// 	else if key == 'left' then undo()
// 	# else if key == 'right'
// 		# console.log g.children,g.child
// 		# [value,san,uci] = g.children[g.child]
// 		# console.log 'move',[value,san,uci]
// 		# g.chess.move san
// 		# g.stack.push g.currNode
// 		# g.currNode = g.currNode[uci]
// 		# makeChildren()
// 	else if key == 'save' then download g.tree, g.name + '.json'
// 	# else if key == 'correct' then correctAnswer()
// 	# else if key == 'wrong' then wrongAnswer()
// 	else console.log 'unknown key in clickString',key

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFscy5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxnbG9iYWxzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxJQUFBLEVBQUE7O0FBQUEsT0FBQTtFQUFRLEdBQVI7RUFBWSxHQUFaO0VBQWdCLEtBQWhCO0VBQXNCLEtBQXRCO0VBQTRCLEtBQTVCO0VBQWtDLFdBQWxDO0VBQThDLFNBQTlDO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsTUFBUjtDQUFBLE1BQUE7O0FBQ0EsT0FBTyxDQUFQLE1BQUE7O0FBRUEsT0FBQSxJQUFPLE1BQUEsR0FBUztFQUVmLElBQUEsRUFBSyxJQUZVO0VBR2YsTUFBQSxFQUFPLElBSFE7RUFJZixNQUFBLEVBQU8sSUFKUTtFQUtmLEtBQUEsRUFBTSxJQUxTO0VBTWYsZ0JBQUEsRUFBbUIsSUFOSjs7Ozs7Ozs7RUFlZixJQUFBLEVBQU8sTUFmUTs7RUFrQmYsT0FBQSxFQUFRLFFBbEJPOzs7OztFQXVCZixJQUFBLEVBQUssSUF2QlU7RUF3QmYsT0FBQSxFQUFRLElBeEJPO0VBeUJmLEVBQUEsRUFBRyxJQXpCWTtFQTBCZixLQUFBLEVBQU0sSUExQlM7RUEyQmYsRUFBQSxFQUFHLElBM0JZO0VBNEJmLEtBQUEsRUFBTSxJQTVCUztFQThCZixJQUFBLEVBQU8sQ0FBQSxDQTlCUTs7RUFnQ2YsT0FBQSxFQUFVO0FBaENLLEVBSmhCOzs7Ozs7QUEyQ0EsT0FBQSxJQUFPLE1BQUEsR0FBUyxDQUFDLEdBQUQsQ0FBQSxHQUFBO0FBQ2hCLE1BQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUE7RUFBQyxLQUFLLENBQUMsTUFBTixDQUFhLEdBQWI7RUFDQSxFQUFBLEdBQUssVUFBVSxDQUFDLE9BQVgsQ0FBbUIsR0FBRyxDQUFDLENBQUQsQ0FBdEI7RUFDTCxFQUFBLEdBQUssVUFBVSxDQUFDLE9BQVgsQ0FBbUIsR0FBRyxDQUFDLENBQUQsQ0FBdEI7RUFDTCxFQUFBLEdBQUssVUFBVSxDQUFDLE9BQVgsQ0FBbUIsR0FBRyxDQUFDLENBQUQsQ0FBdEI7RUFDTCxFQUFBLEdBQUssVUFBVSxDQUFDLE9BQVgsQ0FBbUIsR0FBRyxDQUFDLENBQUQsQ0FBdEI7U0FDTCxLQUFLLENBQUMsS0FBTixDQUFZLENBQUMsRUFBQSxHQUFHLENBQUEsR0FBRSxFQUFOLEVBQVUsRUFBQSxHQUFHLENBQUEsR0FBRSxFQUFmLENBQVo7QUFOZTs7QUFPaEIsR0FBQSxDQUFJLENBQUMsQ0FBRCxFQUFHLEVBQUgsQ0FBSixFQUFZLE1BQUEsQ0FBTyxNQUFQLENBQVo7O0FBRUEsT0FBQSxJQUFPLEtBQUEsR0FBUSxDQUFDLENBQUMsSUFBRCxFQUFNLEVBQU4sQ0FBRCxDQUFBLEdBQUE7QUFDZixNQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBO0VBQUMsS0FBSyxDQUFDLE9BQU4sQ0FBYyxJQUFkO0VBQ0EsS0FBSyxDQUFDLE9BQU4sQ0FBYyxFQUFkO0VBQ0EsRUFBQSxHQUFLLFVBQVUsQ0FBQyxJQUFBLEdBQUssQ0FBTjtFQUNmLEVBQUEsR0FBSyxVQUFVLFlBQUMsT0FBTSxFQUFQO0VBQ2YsRUFBQSxHQUFLLFVBQVUsQ0FBQyxFQUFBLEdBQUcsQ0FBSjtFQUNmLEVBQUEsR0FBSyxVQUFVLFlBQUMsS0FBSSxFQUFMO1NBQ2YsS0FBSyxDQUFDLE1BQU4sQ0FBYSxFQUFBLEdBQUcsRUFBSCxHQUFNLEVBQU4sR0FBUyxFQUF0QjtBQVBjOztBQVFmLEdBQUEsQ0FBSSxNQUFKLEVBQVksS0FBQSxDQUFNLENBQUMsRUFBRCxFQUFJLEVBQUosQ0FBTixDQUFaOztBQUVBLE9BQUEsSUFBTyxnQkFBQSxHQUFtQixDQUFDLENBQUMsSUFBRCxFQUFNLEVBQU4sQ0FBRCxDQUFBLEdBQUE7QUFDMUIsTUFBQTtFQUFDLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBZDtFQUNBLEtBQUssQ0FBQyxPQUFOLENBQWMsRUFBZDtFQUNBLEdBQUEsR0FBTSxLQUFBLENBQU0sQ0FBQyxJQUFELEVBQU0sRUFBTixDQUFOO0VBQ04sSUFBQSxHQUFPLEdBQUcsQ0FBQyxLQUFKLENBQVUsQ0FBVixFQUFZLENBQVo7RUFDUCxFQUFBLEdBQUssR0FBRyxDQUFDLEtBQUosQ0FBVSxDQUFWLEVBQVksQ0FBWjtTQUNMLEtBQUssQ0FBQyxNQUFOLENBQWEsQ0FBQyxJQUFELEVBQU8sRUFBUCxDQUFiO0FBTnlCOztBQU8xQixHQUFBLENBQUk7RUFBQyxJQUFBLEVBQUssSUFBTjtFQUFZLEVBQUEsRUFBRztBQUFmLENBQUosRUFBMEIsZ0JBQUEsQ0FBaUIsQ0FBQyxFQUFELEVBQUksRUFBSixDQUFqQixDQUExQjs7QUFFQSxPQUFBLElBQU8sS0FBQSxHQUFRLENBQUMsQ0FBRCxDQUFBLEdBQUE7RUFDZCxLQUFLLENBQUMsT0FBTixDQUFjLENBQWQ7U0FDQSxLQUFLLENBQUMsTUFBTixDQUFhLENBQUMsQ0FBQSxjQUFFLElBQUcsRUFBTixDQUFRLENBQUMsUUFBVCxDQUFBLENBQWI7QUFGYzs7QUFJZixJQUFBLEdBQU8sQ0FBQSxDQUFBLEdBQUEsRUFBQSxFQTNFUDs7Ozs7OztBQWlGQSxPQUFBLElBQU8sU0FBQSxHQUFZLENBQUEsQ0FBQSxHQUFBO0VBQ2xCLE9BQU8sQ0FBQyxHQUFSLENBQVksZ0JBQVosRUFBRDs7RUFFQyxPQUFPLENBQUMsR0FBUixDQUFZLFlBQVosRUFBeUIsTUFBTSxDQUFDLFFBQWhDO1NBQ0EsT0FBTyxDQUFDLEdBQVIsQ0FBWSxXQUFaLEVBQXdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBYixDQUFBLENBQXhCO0FBSmtCOztBQU1uQixJQUFBLEdBQU8sQ0FBQSxDQUFBLEdBQUE7U0FBRywrQkFBQSxHQUFrQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBQTtBQUFyQzs7QUF2RlAiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2Fzcyxsb2cscmFuZ2Usc3BsaXQscGFyYW0saGV4VG9CYXNlNjQsc3BhY2VTaGlwfSBmcm9tICcuLi9qcy91dGlscy5qcydcclxuaW1wb3J0IHtCdXR0b259IGZyb20gJy4uL2pzL2J1dHRvbi5qcydcclxuaW1wb3J0IF8gZnJvbSAnaHR0cHM6Ly9jZG4uc2t5cGFjay5kZXYvbG9kYXNoJ1xyXG5cclxuZXhwb3J0IGdsb2JhbCA9IHtcclxuXHJcblx0dHJlZTpudWxsLFxyXG5cdGJvYXJkMDpudWxsLFxyXG5cdGJvYXJkMTpudWxsLFxyXG5cdGNoZXNzOm51bGwsXHJcblx0c3BhY2VkUmVwZXRpdGlvbiA6IG51bGwsXHJcblxyXG5cdCNzdGFydCA6IC0xLFxyXG5cdCNzdG9wcCA6IC0xLFxyXG5cclxuXHQjcXVlc3Rpb25zIDogW10sXHJcblx0I3FpbmRleCA6IC0xLFxyXG5cclxuXHQjbmFtZSA6ICdiaXNob3AnLFxyXG5cdG5hbWUgOiAndHJlZScsXHJcblx0I2FyciA6IFtdLFxyXG5cclxuXHR2ZXJzaW9uOid2ZXI6IEInLFxyXG5cdCNjaGlsZCA6IDAsICMgbW92ZSB1bmRlciBjb25zaWRlcmF0aW9uXHJcblx0I2NoaWxkcmVuIDogW10sICMgc29ydGVkIGxpc3Qgb2YgW3ZhbHVlLHNhbix1Y2ldXHJcblxyXG5cdCNTSVpFIDogMzIsICMgb2Ygc3F1YXJlXHJcblx0c2l6ZTpudWxsLFxyXG5cdHNldFNpemU6bnVsbCxcclxuXHRteDpudWxsLFxyXG5cdHNldE14Om51bGwsXHJcblx0bXk6bnVsbCxcclxuXHRzZXRNeTpudWxsLFxyXG5cclxuXHRwaWNzIDoge30sICMgMTIgcGrDpHNlclxyXG5cdCMgZGF0YTpudWxsLFxyXG5cdGJ1dHRvbnMgOiBbXSxcclxuXHQjZGF0YWJhc2UgOiB7fSwgIyBmZW4gPT4gdmFsdWVcclxuXHQjY3Vyck5vZGU6bnVsbCwgIyBwZWthciBpbiBpIGV0dCB0csOkZFxyXG5cdCNjb3VudDogMCwgIyByw6RrbmFyIGFudGFsIG55YSBkcmFnIGkgdHLDpGRldFxyXG5cdCNzdGFjayA6IFtdICMgaW5uZWjDpWxsZXIgYWt0dWVsbCBncmVuXHJcbn1cclxuXHJcbmV4cG9ydCBjb29yZHMgPSAodWNpKSA9PlxyXG5cdHBhcmFtLlN0cmluZyB1Y2lcclxuXHRjMCA9IFwiYWJjZGVmZ2hcIi5pbmRleE9mIHVjaVswXVxyXG5cdHIwID0gXCIxMjM0NTY3OFwiLmluZGV4T2YgdWNpWzFdXHJcblx0YzEgPSBcImFiY2RlZmdoXCIuaW5kZXhPZiB1Y2lbMl1cclxuXHRyMSA9IFwiMTIzNDU2NzhcIi5pbmRleE9mIHVjaVszXVxyXG5cdHBhcmFtLkFycmF5IFtjMCs4KnIwLCBjMSs4KnIxXVxyXG5hc3MgWzgsMjRdLCBjb29yZHMgXCJhMmE0XCJcclxuXHJcbmV4cG9ydCB0b1VDSSA9IChbZnJvbSx0b10pID0+XHJcblx0cGFyYW0uSW50ZWdlciBmcm9tXHJcblx0cGFyYW0uSW50ZWdlciB0b1xyXG5cdGMwID0gXCJhYmNkZWZnaFwiW2Zyb20lOF1cclxuXHRyMCA9IFwiMTIzNDU2NzhcIltmcm9tLy84XVxyXG5cdGMxID0gXCJhYmNkZWZnaFwiW3RvJThdXHJcblx0cjEgPSBcIjEyMzQ1Njc4XCJbdG8vLzhdXHJcblx0cGFyYW0uU3RyaW5nIGMwK3IwK2MxK3IxXHJcbmFzcyBcImUyZTRcIiwgdG9VQ0kgWzEyLDI4XVxyXG5cclxuZXhwb3J0IHRvT2JqZWN0Tm90YXRpb24gPSAoW2Zyb20sdG9dKSA9PlxyXG5cdHBhcmFtLkludGVnZXIgZnJvbVxyXG5cdHBhcmFtLkludGVnZXIgdG9cclxuXHR1Y2kgPSB0b1VDSSBbZnJvbSx0b11cclxuXHRmcm9tID0gdWNpLnNsaWNlIDAsMlxyXG5cdHRvID0gdWNpLnNsaWNlIDIsNFxyXG5cdHBhcmFtLk9iamVjdCB7ZnJvbSwgdG99XHJcbmFzcyB7ZnJvbTonZTInLCB0bzonZTQnfSwgdG9PYmplY3ROb3RhdGlvbiBbMTIsMjhdXHJcblxyXG5leHBvcnQgZW1wdHkgPSAobikgPT5cclxuXHRwYXJhbS5JbnRlZ2VyIG5cclxuXHRwYXJhbS5TdHJpbmcgKDErbi8vOCkudG9TdHJpbmcoKVxyXG5cclxudW5kbyA9ID0+IFxyXG5cdCMgaWYgZ2xvYmFsLnN0YWNrLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuXHJcblx0IyBnbG9iYWwuY2hlc3MudW5kbygpXHJcblx0IyBnbG9iYWwuY3Vyck5vZGUgPSBnbG9iYWwuc3RhY2sucG9wKClcclxuXHQjICMgbWFrZUNoaWxkcmVuKClcclxuXHJcbmV4cG9ydCBkdW1wU3RhdGUgPSA9PlxyXG5cdGNvbnNvbGUubG9nICdTVEFURSAjIyMjIyMjIydcclxuXHQjIGNvbnNvbGUubG9nICcgIHN0YWNrJyxnbG9iYWwuc3RhY2tcclxuXHRjb25zb2xlLmxvZyAnICBjdXJyTm9kZScsZ2xvYmFsLmN1cnJOb2RlXHJcblx0Y29uc29sZS5sb2cgJyAgaGlzdG9yeScsZ2xvYmFsLmNoZXNzLmhpc3RvcnkoKVxyXG5cclxubGluayA9ID0+ICdodHRwczovL2xpY2hlc3Mub3JnL2FuYWx5c2lzLycgKyBnbG9iYWwuY2hlc3MuZmVuKClcclxuXHJcblxyXG4jIGV4cG9ydCBjbGlja1N0cmluZyA9IChrZXkpID0+XHJcbiMgXHRwYXJhbS5TdHJpbmcga2V5XHJcbiMgXHQjZyA9IGdsb2JhbFxyXG4jIFx0I2lmIGtleSA9PSAnZmxpcCcgdGhlbiBnLmJvYXJkLmZsaXAoKVxyXG4jIFx0aWYga2V5ID09ICdsaW5rJyB0aGVuIHdpbmRvdy5vcGVuIGxpbmsoKSwgJ19ibGFuaydcclxuIyBcdCMgZWxzZSBpZiBrZXkgPT0gJ3VwJyAgIHRoZW4gZy5jaGlsZCA9IChnLmNoaWxkLTEpICUlIGcuY2hpbGRyZW4ubGVuZ3RoXHJcbiMgXHQjIGVsc2UgaWYga2V5ID09ICdkb3duJyB0aGVuIGcuY2hpbGQgPSAoZy5jaGlsZCsxKSAlJSBnLmNoaWxkcmVuLmxlbmd0aFxyXG4jIFx0ZWxzZSBpZiBrZXkgPT0gJ3VuZG8nIHRoZW4gdW5kbygpXHJcbiMgXHRlbHNlIGlmIGtleSA9PSAnbGVmdCcgdGhlbiB1bmRvKClcclxuIyBcdCMgZWxzZSBpZiBrZXkgPT0gJ3JpZ2h0J1xyXG4jIFx0XHQjIGNvbnNvbGUubG9nIGcuY2hpbGRyZW4sZy5jaGlsZFxyXG4jIFx0XHQjIFt2YWx1ZSxzYW4sdWNpXSA9IGcuY2hpbGRyZW5bZy5jaGlsZF1cclxuIyBcdFx0IyBjb25zb2xlLmxvZyAnbW92ZScsW3ZhbHVlLHNhbix1Y2ldXHJcbiMgXHRcdCMgZy5jaGVzcy5tb3ZlIHNhblxyXG4jIFx0XHQjIGcuc3RhY2sucHVzaCBnLmN1cnJOb2RlXHJcbiMgXHRcdCMgZy5jdXJyTm9kZSA9IGcuY3Vyck5vZGVbdWNpXVxyXG4jIFx0XHQjIG1ha2VDaGlsZHJlbigpXHJcbiMgXHRlbHNlIGlmIGtleSA9PSAnc2F2ZScgdGhlbiBkb3dubG9hZCBnLnRyZWUsIGcubmFtZSArICcuanNvbidcclxuIyBcdCMgZWxzZSBpZiBrZXkgPT0gJ2NvcnJlY3QnIHRoZW4gY29ycmVjdEFuc3dlcigpXHJcbiMgXHQjIGVsc2UgaWYga2V5ID09ICd3cm9uZycgdGhlbiB3cm9uZ0Fuc3dlcigpXHJcbiMgXHRlbHNlIGNvbnNvbGUubG9nICd1bmtub3duIGtleSBpbiBjbGlja1N0cmluZycsa2V5XHJcbiJdfQ==
//# sourceURL=c:\github\2023-026-chessx2\coffee\globals.coffee